import {
  B,
  F,
  _,
  d,
  k,
  l,
  y,
  z
} from "./chunk-PVHKLNAF.js";
import {
  __extends
} from "./chunk-IBPAXI5X.js";

// node_modules/@fullcalendar/core/vdom.js
var globalObj = typeof globalThis !== "undefined" ? globalThis : window;
if (globalObj.FullCalendarVDom) {
  console.warn("FullCalendar VDOM already loaded");
} else {
  globalObj.FullCalendarVDom = {
    Component: k,
    createElement: y,
    render: B,
    createRef: d,
    Fragment: _,
    createContext,
    createPortal: z,
    flushSync,
    unmountComponentAtNode
  };
}
function flushSync(runBeforeFlush) {
  runBeforeFlush();
  var oldDebounceRendering = l.debounceRendering;
  var callbackQ = [];
  function execCallbackSync(callback) {
    callbackQ.push(callback);
  }
  l.debounceRendering = execCallbackSync;
  B(y(FakeComponent, {}), document.createElement("div"));
  while (callbackQ.length) {
    callbackQ.shift()();
  }
  l.debounceRendering = oldDebounceRendering;
}
var FakeComponent = function(_super) {
  __extends(FakeComponent2, _super);
  function FakeComponent2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  FakeComponent2.prototype.render = function() {
    return y("div", {});
  };
  FakeComponent2.prototype.componentDidMount = function() {
    this.setState({});
  };
  return FakeComponent2;
}(k);
function createContext(defaultValue) {
  var ContextType = F(defaultValue);
  var origProvider = ContextType.Provider;
  ContextType.Provider = function() {
    var _this = this;
    var isNew = !this.getChildContext;
    var children = origProvider.apply(this, arguments);
    if (isNew) {
      var subs_1 = [];
      this.shouldComponentUpdate = function(_props) {
        if (_this.props.value !== _props.value) {
          subs_1.forEach(function(c) {
            c.context = _props.value;
            c.forceUpdate();
          });
        }
      };
      this.sub = function(c) {
        subs_1.push(c);
        var old = c.componentWillUnmount;
        c.componentWillUnmount = function() {
          subs_1.splice(subs_1.indexOf(c), 1);
          old && old.call(c);
        };
      };
    }
    return children;
  };
  return ContextType;
}
function unmountComponentAtNode(node) {
  B(null, node);
}
//# sourceMappingURL=chunk-7AWMUUVC.js.map
