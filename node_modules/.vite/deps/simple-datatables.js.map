{
  "version": 3,
  "sources": ["../../simple-datatables/src/helpers.js", "../../simple-datatables/src/rows.js", "../../simple-datatables/src/columns.js", "../../simple-datatables/src/table.js", "../../simple-datatables/src/config.js", "../../simple-datatables/src/datatable.js"],
  "sourcesContent": ["/**\n * Check is item is object\n * @return {Boolean}\n */\nexport const isObject = val => Object.prototype.toString.call(val) === \"[object Object]\"\n\n/**\n * Check for valid JSON string\n * @param  {String}   str\n * @return {Boolean|Array|Object}\n */\nexport const isJson = str => {\n    let t = !1\n    try {\n        t = JSON.parse(str)\n    } catch (e) {\n        return !1\n    }\n    return !(null === t || (!Array.isArray(t) && !isObject(t))) && t\n}\n\n/**\n * Create DOM element node\n * @param  {String}   nodeName nodeName\n * @param  {Object}   attrs properties and attributes\n * @return {Object}\n */\nexport const createElement = (nodeName, attrs) => {\n    const dom = document.createElement(nodeName)\n    if (attrs && \"object\" == typeof attrs) {\n        for (const attr in attrs) {\n            if (\"html\" === attr) {\n                dom.innerHTML = attrs[attr]\n            } else {\n                dom.setAttribute(attr, attrs[attr])\n            }\n        }\n    }\n    return dom\n}\n\nexport const flush = el => {\n    if (el instanceof NodeList) {\n        el.forEach(e => flush(e))\n    } else {\n        el.innerHTML = \"\"\n    }\n}\n\n/**\n * Create button helper\n * @param  {String}   class\n * @param  {Number}   page\n * @param  {String}   text\n * @return {Object}\n */\nexport const button = (className, page, text) => createElement(\n    \"li\",\n    {\n        class: className,\n        html: `<a href=\"#\" data-page=\"${page}\">${text}</a>`\n    }\n)\n\n/**\n * Bubble sort algorithm\n */\nexport const sortItems = (a, b) => {\n    let c\n    let d\n    if (1 === b) {\n        c = 0\n        d = a.length\n    } else {\n        if (b === -1) {\n            c = a.length - 1\n            d = -1\n        }\n    }\n    for (let e = !0; e;) {\n        e = !1\n        for (let f = c; f != d; f += b) {\n            if (a[f + b] && a[f].value > a[f + b].value) {\n                const g = a[f]\n                const h = a[f + b]\n                const i = g\n                a[f] = h\n                a[f + b] = i\n                e = !0\n            }\n        }\n    }\n    return a\n}\n\n/**\n * Pager truncation algorithm\n */\nexport const truncate = (a, b, c, d, ellipsis) => {\n    d = d || 2\n    let j\n    const e = 2 * d\n    let f = b - d\n    let g = b + d\n    const h = []\n    const i = []\n    if (b < 4 - d + e) {\n        g = 3 + e\n    } else if (b > c - (3 - d + e)) {\n        f = c - (2 + e)\n    }\n    for (let k = 1; k <= c; k++) {\n        if (1 == k || k == c || (k >= f && k <= g)) {\n            const l = a[k - 1]\n            l.classList.remove(\"active\")\n            h.push(l)\n        }\n    }\n    h.forEach(c => {\n        const d = c.children[0].getAttribute(\"data-page\")\n        if (j) {\n            const e = j.children[0].getAttribute(\"data-page\")\n            if (d - e == 2) i.push(a[e])\n            else if (d - e != 1) {\n                const f = createElement(\"li\", {\n                    class: \"ellipsis\",\n                    html: `<a href=\"#\">${ellipsis}</a>`\n                })\n                i.push(f)\n            }\n        }\n        i.push(c)\n        j = c\n    })\n\n    return i\n}\n", "import {createElement} from \"./helpers\"\n/**\n * Rows API\n * @param {Object} instance DataTable instance\n * @param {Array} rows\n */\nexport class Rows {\n    constructor(dt, rows) {\n        this.dt = dt\n        this.rows = rows\n\n        return this\n    }\n\n    /**\n     * Build a new row\n     * @param  {Array} row\n     * @return {HTMLElement}\n     */\n    build(row) {\n        const tr = createElement(\"tr\")\n\n        let headings = this.dt.headings\n\n        if (!headings.length) {\n            headings = row.map(() => \"\")\n        }\n\n        headings.forEach((h, i) => {\n            const td = createElement(\"td\")\n\n            // Fixes #29\n            if (!row[i] || !row[i].length) {\n                row[i] = \"\"\n            }\n\n            td.innerHTML = row[i]\n\n            td.data = row[i]\n\n            tr.appendChild(td)\n        })\n\n        return tr\n    }\n\n    render(row) {\n        return row\n    }\n\n    /**\n     * Add new row\n     * @param {Array} select\n     */\n    add(data) {\n        if (Array.isArray(data)) {\n            const dt = this.dt\n            // Check for multiple rows\n            if (Array.isArray(data[0])) {\n                data.forEach(row => {\n                    dt.data.push(this.build(row))\n                })\n            } else {\n                dt.data.push(this.build(data))\n            }\n\n            // We may have added data to an empty table\n            if ( dt.data.length ) {\n                dt.hasRows = true\n            }\n\n\n            this.update()\n\n            dt.columns().rebuild()\n        }\n\n    }\n\n    /**\n     * Remove row(s)\n     * @param  {Array|Number} select\n     * @return {Void}\n     */\n    remove(select) {\n        const dt = this.dt\n\n        if (Array.isArray(select)) {\n            // Remove in reverse otherwise the indexes will be incorrect\n            select.sort((a, b) => b - a)\n\n            select.forEach(row => {\n                dt.data.splice(row, 1)\n            })\n        } else if (select == \"all\") {\n            dt.data = [];\n        } else {\n            dt.data.splice(select, 1)\n        }\n\n        // We may have emptied the table\n        if ( !dt.data.length ) {\n            dt.hasRows = false\n        }\n\n        this.update()\n        dt.columns().rebuild()\n    }\n\n    /**\n     * Update row indexes\n     * @return {Void}\n     */\n    update() {\n        this.dt.data.forEach((row, i) => {\n            row.dataIndex = i\n        })\n    }\n\n    /**\n     * Find index of row by searching for a value in a column\n     * @param  {Number} columnIndex\n     * @param  {String} value\n     * @return {Number}\n     */\n    findRowIndex(columnIndex, value) {\n        // returns row index of first case-insensitive string match\n        // inside the td innerText at specific column index\n        return this.dt.data.findIndex(\n            tr => tr.children[columnIndex].innerText.toLowerCase().includes(String(value).toLowerCase())\n        )\n    }\n\n    /**\n     * Find index, row, and column data by searching for a value in a column\n     * @param  {Number} columnIndex\n     * @param  {String} value\n     * @return {Object}\n     */\n    findRow(columnIndex, value) {\n        // get the row index\n        const index = this.findRowIndex(columnIndex, value)\n        // exit if not found\n        if (index < 0) {\n            return {\n                index: -1,\n                row: null,\n                cols: []\n            }\n        }\n        // get the row from data\n        const row = this.dt.data[index]\n        // return innerHTML of each td\n        const cols = [...row.cells].map(r => r.innerHTML)\n        // return everything\n        return {\n            index,\n            row,\n            cols\n        }\n    }\n\n    /**\n     * Update a row with new data\n     * @param  {Number} select\n     * @param  {Array} data\n     * @return {Void}\n     */\n    updateRow(select, data) {\n        const row = this.build(data)\n        this.dt.data.splice(select, 1, row)\n        this.update()\n        this.dt.columns().rebuild()\n    }\n}\n", "import {sortItems} from \"./helpers\"\n\n/**\n * Columns API\n * @param {Object} instance DataTable instance\n * @param {Mixed} columns  Column index or array of column indexes\n */\nexport class Columns {\n    constructor(dt) {\n        this.dt = dt\n        return this\n    }\n\n    /**\n     * Swap two columns\n     * @return {Void}\n     */\n    swap(columns) {\n        if (columns.length && columns.length === 2) {\n            const cols = []\n\n            // Get the current column indexes\n            this.dt.headings.forEach((h, i) => {\n                cols.push(i)\n            })\n\n            const x = columns[0]\n            const y = columns[1]\n            const b = cols[y]\n            cols[y] = cols[x]\n            cols[x] = b\n\n            this.order(cols)\n        }\n    }\n\n    /**\n     * Reorder the columns\n     * @return {Array} columns  Array of ordered column indexes\n     */\n    order(columns) {\n        let a\n        let b\n        let c\n        let d\n        let h\n        let s\n        let cell\n\n        const temp = [\n            [],\n            [],\n            [],\n            []\n        ]\n\n        const dt = this.dt\n\n        // Order the headings\n        columns.forEach((column, x) => {\n            h = dt.headings[column]\n            s = h.getAttribute(\"data-sortable\") !== \"false\"\n            a = h.cloneNode(true)\n            a.originalCellIndex = x\n            a.sortable = s\n\n            temp[0].push(a)\n\n            if (!dt.hiddenColumns.includes(column)) {\n                b = h.cloneNode(true)\n                b.originalCellIndex = x\n                b.sortable = s\n\n                temp[1].push(b)\n            }\n        })\n\n        // Order the row cells\n        dt.data.forEach((row, i) => {\n            c = row.cloneNode(false)\n            d = row.cloneNode(false)\n\n            c.dataIndex = d.dataIndex = i\n\n            if (row.searchIndex !== null && row.searchIndex !== undefined) {\n                c.searchIndex = d.searchIndex = row.searchIndex\n            }\n\n            // Append the cell to the fragment in the correct order\n            columns.forEach(column => {\n                cell = row.cells[column].cloneNode(true)\n                cell.data = row.cells[column].data\n                c.appendChild(cell)\n\n                if (!dt.hiddenColumns.includes(column)) {\n                    cell = row.cells[column].cloneNode(true)\n                    cell.data = row.cells[column].data\n                    d.appendChild(cell)\n                }\n            })\n\n            temp[2].push(c)\n            temp[3].push(d)\n        })\n\n        dt.headings = temp[0]\n        dt.activeHeadings = temp[1]\n\n        dt.data = temp[2]\n        dt.activeRows = temp[3]\n\n        // Update\n        dt.update()\n    }\n\n    /**\n     * Hide columns\n     * @return {Void}\n     */\n    hide(columns) {\n        if (columns.length) {\n            const dt = this.dt\n\n            columns.forEach(column => {\n                if (!dt.hiddenColumns.includes(column)) {\n                    dt.hiddenColumns.push(column)\n                }\n            })\n\n            this.rebuild()\n        }\n    }\n\n    /**\n     * Show columns\n     * @return {Void}\n     */\n    show(columns) {\n        if (columns.length) {\n            let index\n            const dt = this.dt\n\n            columns.forEach(column => {\n                index = dt.hiddenColumns.indexOf(column)\n                if (index > -1) {\n                    dt.hiddenColumns.splice(index, 1)\n                }\n            })\n\n            this.rebuild()\n        }\n    }\n\n    /**\n     * Check column(s) visibility\n     * @return {Boolean}\n     */\n    visible(columns) {\n        let cols\n        const dt = this.dt\n\n        columns = columns || dt.headings.map(th => th.originalCellIndex)\n\n        if (!isNaN(columns)) {\n            cols = !dt.hiddenColumns.includes(columns)\n        } else if (Array.isArray(columns)) {\n            cols = []\n            columns.forEach(column => {\n                cols.push(!dt.hiddenColumns.includes(column))\n            })\n        }\n\n        return cols\n    }\n\n    /**\n     * Add a new column\n     * @param {Object} data\n     */\n    add(data) {\n        let td\n        const th = document.createElement(\"th\")\n\n        if (!this.dt.headings.length) {\n            this.dt.insert({\n                headings: [data.heading],\n                data: data.data.map(i => [i])\n            })\n            this.rebuild()\n            return\n        }\n\n        if (!this.dt.hiddenHeader) {\n            if (data.heading.nodeName) {\n                th.appendChild(data.heading)\n            } else {\n                th.innerHTML = data.heading\n            }\n        } else {\n            th.innerHTML = \"\"\n        }\n\n        this.dt.headings.push(th)\n\n        this.dt.data.forEach((row, i) => {\n            if (data.data[i]) {\n                td = document.createElement(\"td\")\n\n                if (data.data[i].nodeName) {\n                    td.appendChild(data.data[i])\n                } else {\n                    td.innerHTML = data.data[i]\n                }\n\n                td.data = td.innerHTML\n\n                if (data.render) {\n                    td.innerHTML = data.render.call(this, td.data, td, row)\n                }\n\n                row.appendChild(td)\n            }\n        })\n\n        if (data.type) {\n            th.setAttribute(\"data-type\", data.type)\n        }\n        if (data.format) {\n            th.setAttribute(\"data-format\", data.format)\n        }\n\n        if (data.hasOwnProperty(\"sortable\")) {\n            th.sortable = data.sortable\n            th.setAttribute(\"data-sortable\", data.sortable === true ? \"true\" : \"false\")\n        }\n\n        this.rebuild()\n\n        this.dt.renderHeader()\n    }\n\n    /**\n     * Remove column(s)\n     * @param  {Array|Number} select\n     * @return {Void}\n     */\n    remove(select) {\n        if (Array.isArray(select)) {\n            // Remove in reverse otherwise the indexes will be incorrect\n            select.sort((a, b) => b - a)\n            select.forEach(column => this.remove(column))\n        } else {\n            this.dt.headings.splice(select, 1)\n\n            this.dt.data.forEach(row => {\n                row.removeChild(row.cells[select])\n            })\n        }\n\n        this.rebuild()\n    }\n\n    /**\n     * Filter by column\n     * @param  {int} column - The column no.\n     * @param  {string} dir - asc or desc\n     * @filter {array} filter - optional parameter with a list of strings\n     * @return {void}\n     */\n    filter(column, dir, init, terms) {\n        const dt = this.dt\n\n        // Creates a internal state that manages filters if there are none\n        if ( !dt.filterState ) {\n            dt.filterState = {\n                originalData: dt.data\n            }\n        }\n\n        // If that column is was not filtered yet, we need to create its state\n        if ( !dt.filterState[column] ) {\n\n            // append a filter that selects all rows, 'resetting' the filter\n            const filters = [...terms, () => true]\n\n            dt.filterState[column] = (\n                function() {\n                    let i = 0;\n                    return () => filters[i++ % (filters.length)]\n                }()\n            )\n        }\n\n        // Apply the filter and rebuild table\n        const rowFilter = dt.filterState[column]() // fetches next filter\n        const filteredRows = Array.from(dt.filterState.originalData).filter(tr => {\n            const cell = tr.cells[column]\n            const content = cell.hasAttribute(\"data-content\") ? cell.getAttribute(\"data-content\") : cell.innerText\n\n            // If the filter is a function, call it, if it is a string, compare it\n            return (typeof rowFilter) === \"function\" ? rowFilter(content) : content === rowFilter;\n        })\n\n        dt.data = filteredRows\n\n        if (!dt.data.length) {\n            dt.clear()\n            dt.hasRows = false\n            dt.setMessage(dt.options.labels.noRows)\n        } else {\n            this.rebuild()\n            dt.update()\n        }\n\n        if (!init) {\n            dt.emit(\"datatable.sort\", column, dir)\n        }\n    }\n\n    /**\n     * Sort by column\n     * @param  {int} column - The column no.\n     * @param  {string} dir - asc or desc\n     * @return {void}\n     */\n    sort(column, dir, init) {\n        const dt = this.dt\n\n        // Check column is present\n        if (dt.hasHeadings && (column < 0 || column > dt.headings.length)) {\n            return false\n        }\n\n        //If there is a filter for this column, apply it instead of sorting\n        const filterTerms = dt.options.filters &&\n              dt.options.filters[dt.headings[column].textContent]\n        if ( filterTerms && filterTerms.length !== 0 ) {\n            this.filter(column, dir, init, filterTerms)\n            return;\n        }\n\n        dt.sorting = true\n\n        if (!init) {\n            dt.emit(\"datatable.sorting\", column, dir)\n        }\n\n        let rows = dt.data\n        const alpha = []\n        const numeric = []\n        let a = 0\n        let n = 0\n        const th = dt.headings[column]\n\n        const waitFor = []\n\n        // Check for date format\n        if (th.getAttribute(\"data-type\") === \"date\") {\n            let format = false\n            const formatted = th.hasAttribute(\"data-format\")\n\n            if (formatted) {\n                format = th.getAttribute(\"data-format\")\n            }\n            waitFor.push(import(\"./date\").then(({parseDate}) => date => parseDate(date, format)))\n        }\n\n        Promise.all(waitFor).then(importedFunctions => {\n            const parseFunction = importedFunctions[0] // only defined if date\n            Array.from(rows).forEach(tr => {\n                const cell = tr.cells[column]\n                const content = cell.hasAttribute(\"data-content\") ? cell.getAttribute(\"data-content\") : cell.innerText\n                let num\n                if (parseFunction) {\n                    num = parseFunction(content)\n                } else if (typeof content===\"string\") {\n                    num = content.replace(/(\\$|,|\\s|%)/g, \"\")\n                } else {\n                    num = content\n                }\n\n                if (parseFloat(num) == num) {\n                    numeric[n++] = {\n                        value: Number(num),\n                        row: tr\n                    }\n                } else {\n                    alpha[a++] = {\n                        value: typeof content===\"string\" ? content.toLowerCase() : content,\n                        row: tr\n                    }\n                }\n            })\n\n            /* Sort according to direction (ascending or descending) */\n            if (!dir) {\n                if (th.classList.contains(\"asc\")) {\n                    dir = \"desc\"\n                } else {\n                    dir = \"asc\"\n                }\n            }\n            let top\n            let btm\n            if (dir == \"desc\") {\n                top = sortItems(alpha, -1)\n                btm = sortItems(numeric, -1)\n                th.classList.remove(\"asc\")\n                th.classList.add(\"desc\")\n            } else {\n                top = sortItems(numeric, 1)\n                btm = sortItems(alpha, 1)\n                th.classList.remove(\"desc\")\n                th.classList.add(\"asc\")\n            }\n\n            /* Clear asc/desc class names from the last sorted column's th if it isn't the same as the one that was just clicked */\n            if (dt.lastTh && th != dt.lastTh) {\n                dt.lastTh.classList.remove(\"desc\")\n                dt.lastTh.classList.remove(\"asc\")\n            }\n\n            dt.lastTh = th\n\n            /* Reorder the table */\n            rows = top.concat(btm)\n\n            dt.data = []\n            const indexes = []\n\n            rows.forEach((v, i) => {\n                dt.data.push(v.row)\n\n                if (v.row.searchIndex !== null && v.row.searchIndex !== undefined) {\n                    indexes.push(i)\n                }\n            })\n\n            dt.searchData = indexes\n\n            this.rebuild()\n\n            dt.update()\n\n            if (!init) {\n                dt.emit(\"datatable.sort\", column, dir)\n            }\n        })\n    }\n\n    /**\n     * Rebuild the columns\n     * @return {Void}\n     */\n    rebuild() {\n        let a\n        let b\n        let c\n        let d\n        const dt = this.dt\n        const temp = []\n\n        dt.activeRows = []\n        dt.activeHeadings = []\n\n        dt.headings.forEach((th, i) => {\n            th.originalCellIndex = i\n            th.sortable = th.getAttribute(\"data-sortable\") !== \"false\"\n            if (!dt.hiddenColumns.includes(i)) {\n                dt.activeHeadings.push(th)\n            }\n        })\n\n        // Loop over the rows and reorder the cells\n        dt.data.forEach((row, i) => {\n            a = row.cloneNode(false)\n            b = row.cloneNode(false)\n\n            a.dataIndex = b.dataIndex = i\n\n            if (row.searchIndex !== null && row.searchIndex !== undefined) {\n                a.searchIndex = b.searchIndex = row.searchIndex\n            }\n\n            // Append the cell to the fragment in the correct order\n            Array.from(row.cells).forEach(cell => {\n                c = cell.cloneNode(true)\n                c.data = cell.data\n                a.appendChild(c)\n\n                if (!dt.hiddenColumns.includes(c.cellIndex)) {\n                    d = c.cloneNode(true)\n                    d.data = c.data\n                    b.appendChild(d)\n                }\n            })\n\n            // Append the fragment with the ordered cells\n            temp.push(a)\n            dt.activeRows.push(b)\n        })\n\n        dt.data = temp\n\n        dt.update()\n    }\n}\n", "import {createElement} from \"./helpers\"\n\n/**\n * Parse data to HTML table\n */\nexport const dataToTable = function (data) {\n    let thead = false\n    let tbody = false\n\n    data = data || this.options.data\n\n    if (data.headings) {\n        thead = createElement(\"thead\")\n        const tr = createElement(\"tr\")\n        data.headings.forEach(col => {\n            const td = createElement(\"th\", {\n                html: col\n            })\n            tr.appendChild(td)\n        })\n\n        thead.appendChild(tr)\n    }\n\n    if (data.data && data.data.length) {\n        tbody = createElement(\"tbody\")\n        data.data.forEach(rows => {\n            if (data.headings) {\n                if (data.headings.length !== rows.length) {\n                    throw new Error(\n                        \"The number of rows do not match the number of headings.\"\n                    )\n                }\n            }\n            const tr = createElement(\"tr\")\n            rows.forEach(value => {\n                const td = createElement(\"td\", {\n                    html: value\n                })\n                tr.appendChild(td)\n            })\n            tbody.appendChild(tr)\n        })\n    }\n\n    if (thead) {\n        if (this.dom.tHead !== null) {\n            this.dom.removeChild(this.dom.tHead)\n        }\n        this.dom.appendChild(thead)\n    }\n\n    if (tbody) {\n        if (this.dom.tBodies.length) {\n            this.dom.removeChild(this.dom.tBodies[0])\n        }\n        this.dom.appendChild(tbody)\n    }\n}\n", "/**\n * Default configuration\n * @typ {Object}\n */\nexport const defaultConfig = {\n    sortable: true,\n    searchable: true,\n\n    // Pagination\n    paging: true,\n    perPage: 10,\n    perPageSelect: [5, 10, 15, 20, 25],\n    nextPrev: true,\n    firstLast: false,\n    prevText: \"&lsaquo;\",\n    nextText: \"&rsaquo;\",\n    firstText: \"&laquo;\",\n    lastText: \"&raquo;\",\n    ellipsisText: \"&hellip;\",\n    ascText: \"\u25B4\",\n    descText: \"\u25BE\",\n    truncatePager: true,\n    pagerDelta: 2,\n\n    scrollY: \"\",\n\n    fixedColumns: true,\n    fixedHeight: false,\n\n    header: true,\n    hiddenHeader: false,\n    footer: false,\n\n    // Customise the display text\n    labels: {\n        placeholder: \"Search...\", // The search input placeholder\n        perPage: \"{select} entries per page\", // per-page dropdown label\n        noRows: \"No entries found\", // Message shown when there are no records to show\n        noResults: \"No results match your search query\", // Message shown when there are no search results\n        info: \"Showing {start} to {end} of {rows} entries\" //\n    },\n\n    // Customise the layout\n    layout: {\n        top: \"{select}{search}\",\n        bottom: \"{info}{pager}\"\n    }\n}\n", "import {Rows} from \"./rows\"\nimport {Columns} from \"./columns\"\nimport {dataToTable} from \"./table\"\nimport {defaultConfig} from \"./config\"\nimport {\n    isObject,\n    isJson,\n    createElement,\n    flush,\n    button,\n    truncate\n} from \"./helpers\"\n\n\nexport class DataTable {\n    constructor(table, options = {}) {\n\n        const dom = typeof table === \"string\" ? document.querySelector(table) : table\n\n        // user options\n        this.options = {\n            ...defaultConfig,\n            ...options,\n            layout: {\n                ...defaultConfig.layout,\n                ...options.layout\n            },\n            labels: {\n                ...defaultConfig.labels,\n                ...options.labels\n            }\n        }\n\n        this.initialized = false\n\n        this.initialLayout = dom.innerHTML\n        this.initialSortable = this.options.sortable\n\n        // Disable manual sorting if no header is present (#4)\n        if (!this.options.header) {\n            this.options.sortable = false\n        }\n\n        if (dom.tHead === null) {\n            if (!this.options.data ||\n                (this.options.data && !this.options.data.headings)\n            ) {\n                this.options.sortable = false\n            }\n        }\n\n        if (dom.tBodies.length && !dom.tBodies[0].rows.length) {\n            if (this.options.data) {\n                if (!this.options.data.data) {\n                    throw new Error(\n                        \"You seem to be using the data option, but you've not defined any rows.\"\n                    )\n                }\n            }\n        }\n\n        this.dom = dom\n\n        this.table = this.dom // For compatibility. Remove in version 4\n\n        this.listeners = {\n            onResize: event => this.onResize(event)\n        }\n\n        this.init()\n    }\n\n    /**\n     * Add custom property or method to extend DataTable\n     * @param  {String} prop    - Method name or property\n     * @param  {Mixed} val      - Function or property value\n     * @return {Void}\n     */\n    static extend(prop, val) {\n        if (typeof val === \"function\") {\n            DataTable.prototype[prop] = val\n        } else {\n            DataTable[prop] = val\n        }\n    }\n\n    /**\n     * Initialize the instance\n     * @param  {Object} options\n     * @return {Void}\n     */\n    init(options) {\n        if (this.initialized || this.dom.classList.contains(\"dataTable-table\")) {\n            return false\n        }\n\n        Object.assign(this.options, options || {})\n\n        this.currentPage = 1\n        this.onFirstPage = true\n\n        this.hiddenColumns = []\n        this.columnRenderers = []\n        this.selectedColumns = []\n\n        this.render()\n\n        setTimeout(() => {\n            this.emit(\"datatable.init\")\n            this.initialized = true\n\n            if (this.options.plugins) {\n                Object.entries(this.options.plugins).forEach(([plugin, options]) => {\n                    if (this[plugin] && typeof this[plugin] === \"function\") {\n                        this[plugin] = this[plugin](options, {createElement})\n\n                        // Init plugin\n                        if (options.enabled && this[plugin].init && typeof this[plugin].init === \"function\") {\n                            this[plugin].init()\n                        }\n                    }\n                })\n            }\n        }, 10)\n    }\n\n    /**\n     * Render the instance\n     * @param  {String} type\n     * @return {Void}\n     */\n    render(type) {\n        if (type) {\n            switch (type) {\n            case \"page\":\n                this.renderPage()\n                break\n            case \"pager\":\n                this.renderPager()\n                break\n            case \"header\":\n                this.renderHeader()\n                break\n            }\n\n            return false\n        }\n\n        const options = this.options\n        let template = \"\"\n\n        // Convert data to HTML\n        if (options.data) {\n            dataToTable.call(this)\n        }\n\n        // Store references\n        this.body = this.dom.tBodies[0]\n        this.head = this.dom.tHead\n        this.foot = this.dom.tFoot\n\n        if (!this.body) {\n            this.body = createElement(\"tbody\")\n\n            this.dom.appendChild(this.body)\n        }\n\n        this.hasRows = this.body.rows.length > 0\n\n        // Make a tHead if there isn't one (fixes #8)\n        if (!this.head) {\n            const h = createElement(\"thead\")\n            const t = createElement(\"tr\")\n\n            if (this.hasRows) {\n                Array.from(this.body.rows[0].cells).forEach(() => {\n                    t.appendChild(createElement(\"th\"))\n                })\n\n                h.appendChild(t)\n            }\n\n            this.head = h\n\n            this.dom.insertBefore(this.head, this.body)\n\n            this.hiddenHeader = options.hiddenHeader\n        }\n\n        this.headings = []\n        this.hasHeadings = this.head.rows.length > 0\n\n        if (this.hasHeadings) {\n            this.header = this.head.rows[0]\n            this.headings = [].slice.call(this.header.cells)\n        }\n\n        // Header\n        if (!options.header) {\n            if (this.head) {\n                this.dom.removeChild(this.dom.tHead)\n            }\n        }\n\n        // Footer\n        if (options.footer) {\n            if (this.head && !this.foot) {\n                this.foot = createElement(\"tfoot\", {\n                    html: this.head.innerHTML\n                })\n                this.dom.appendChild(this.foot)\n            }\n        } else {\n            if (this.foot) {\n                this.dom.removeChild(this.dom.tFoot)\n            }\n        }\n\n        // Build\n        this.wrapper = createElement(\"div\", {\n            class: \"dataTable-wrapper dataTable-loading\"\n        })\n\n        // Template for custom layouts\n        template += \"<div class='dataTable-top'>\"\n        template += options.layout.top\n        template += \"</div>\"\n        if (options.scrollY.length) {\n            template += `<div class='dataTable-container' style='height: ${options.scrollY}; overflow-Y: auto;'></div>`\n        } else {\n            template += \"<div class='dataTable-container'></div>\"\n        }\n        template += \"<div class='dataTable-bottom'>\"\n        template += options.layout.bottom\n        template += \"</div>\"\n\n        // Info placement\n        template = template.replace(\"{info}\", options.paging ? \"<div class='dataTable-info'></div>\" : \"\")\n\n        // Per Page Select\n        if (options.paging && options.perPageSelect) {\n            let wrap = \"<div class='dataTable-dropdown'><label>\"\n            wrap += options.labels.perPage\n            wrap += \"</label></div>\"\n\n            // Create the select\n            const select = createElement(\"select\", {\n                class: \"dataTable-selector\"\n            })\n\n            // Create the options\n            options.perPageSelect.forEach(val => {\n                const selected = val === options.perPage\n                const option = new Option(val, val, selected, selected)\n                select.add(option)\n            })\n\n            // Custom label\n            wrap = wrap.replace(\"{select}\", select.outerHTML)\n\n            // Selector placement\n            template = template.replace(\"{select}\", wrap)\n        } else {\n            template = template.replace(\"{select}\", \"\")\n        }\n\n        // Searchable\n        if (options.searchable) {\n            const form =\n                `<div class='dataTable-search'><input class='dataTable-input' placeholder='${options.labels.placeholder}' type='text'></div>`\n\n            // Search input placement\n            template = template.replace(\"{search}\", form)\n        } else {\n            template = template.replace(\"{search}\", \"\")\n        }\n\n        if (this.hasHeadings) {\n            // Sortable\n            this.render(\"header\")\n        }\n\n        // Add table class\n        this.dom.classList.add(\"dataTable-table\")\n\n        // Paginator\n        const paginatorWrapper = createElement(\"nav\", {\n            class: \"dataTable-pagination\"\n        })\n        const paginator = createElement(\"ul\", {\n            class: \"dataTable-pagination-list\"\n        })\n        paginatorWrapper.appendChild(paginator)\n\n        // Pager(s) placement\n        template = template.replace(/\\{pager\\}/g, paginatorWrapper.outerHTML)\n        this.wrapper.innerHTML = template\n\n        this.container = this.wrapper.querySelector(\".dataTable-container\")\n\n        this.pagers = this.wrapper.querySelectorAll(\".dataTable-pagination-list\")\n\n        this.label = this.wrapper.querySelector(\".dataTable-info\")\n\n        // Insert in to DOM tree\n        this.dom.parentNode.replaceChild(this.wrapper, this.dom)\n        this.container.appendChild(this.dom)\n\n        // Store the table dimensions\n        this.rect = this.dom.getBoundingClientRect()\n\n        // Convert rows to array for processing\n        this.data = Array.from(this.body.rows)\n        this.activeRows = this.data.slice()\n        this.activeHeadings = this.headings.slice()\n\n        // Update\n        this.update()\n\n\n        this.setColumns()\n\n\n        // Fix height\n        this.fixHeight()\n\n        // Fix columns\n        this.fixColumns()\n\n        // Class names\n        if (!options.header) {\n            this.wrapper.classList.add(\"no-header\")\n        }\n\n        if (!options.footer) {\n            this.wrapper.classList.add(\"no-footer\")\n        }\n\n        if (options.sortable) {\n            this.wrapper.classList.add(\"sortable\")\n        }\n\n        if (options.searchable) {\n            this.wrapper.classList.add(\"searchable\")\n        }\n\n        if (options.fixedHeight) {\n            this.wrapper.classList.add(\"fixed-height\")\n        }\n\n        if (options.fixedColumns) {\n            this.wrapper.classList.add(\"fixed-columns\")\n        }\n\n        this.bindEvents()\n    }\n\n    /**\n     * Render the page\n     * @return {Void}\n     */\n    renderPage() {\n        if (this.hasHeadings) {\n            flush(this.header)\n\n            this.activeHeadings.forEach(th => this.header.appendChild(th))\n        }\n\n\n        if (this.hasRows && this.totalPages) {\n            if (this.currentPage > this.totalPages) {\n                this.currentPage = 1\n            }\n\n            // Use a fragment to limit touching the DOM\n            const index = this.currentPage - 1\n\n            const frag = document.createDocumentFragment()\n            this.pages[index].forEach(row => frag.appendChild(this.rows().render(row)))\n\n            this.clear(frag)\n\n            this.onFirstPage = this.currentPage === 1\n            this.onLastPage = this.currentPage === this.lastPage\n        } else {\n            this.setMessage(this.options.labels.noRows)\n        }\n\n        // Update the info\n        let current = 0\n\n        let f = 0\n        let t = 0\n        let items\n\n        if (this.totalPages) {\n            current = this.currentPage - 1\n            f = current * this.options.perPage\n            t = f + this.pages[current].length\n            f = f + 1\n            items = this.searching ? this.searchData.length : this.data.length\n        }\n\n        if (this.label && this.options.labels.info.length) {\n            // CUSTOM LABELS\n            const string = this.options.labels.info\n                .replace(\"{start}\", f)\n                .replace(\"{end}\", t)\n                .replace(\"{page}\", this.currentPage)\n                .replace(\"{pages}\", this.totalPages)\n                .replace(\"{rows}\", items)\n\n            this.label.innerHTML = items ? string : \"\"\n        }\n\n        if (this.currentPage == 1) {\n            this.fixHeight()\n        }\n    }\n\n    /**\n     * Render the pager(s)\n     * @return {Void}\n     */\n    renderPager() {\n        flush(this.pagers)\n\n        if (this.totalPages > 1) {\n            const c = \"pager\"\n            const frag = document.createDocumentFragment()\n            const prev = this.onFirstPage ? 1 : this.currentPage - 1\n            const next = this.onLastPage ? this.totalPages : this.currentPage + 1\n\n            // first button\n            if (this.options.firstLast) {\n                frag.appendChild(button(c, 1, this.options.firstText))\n            }\n\n            // prev button\n            if (this.options.nextPrev && !this.onFirstPage) {\n                frag.appendChild(button(c, prev, this.options.prevText))\n            }\n\n            let pager = this.links\n\n            // truncate the links\n            if (this.options.truncatePager) {\n                pager = truncate(\n                    this.links,\n                    this.currentPage,\n                    this.pages.length,\n                    this.options.pagerDelta,\n                    this.options.ellipsisText\n                )\n            }\n\n            // active page link\n            this.links[this.currentPage - 1].classList.add(\"active\")\n\n            // append the links\n            pager.forEach(p => {\n                p.classList.remove(\"active\")\n                frag.appendChild(p)\n            })\n\n            this.links[this.currentPage - 1].classList.add(\"active\")\n\n            // next button\n            if (this.options.nextPrev && !this.onLastPage) {\n                frag.appendChild(button(c, next, this.options.nextText))\n            }\n\n            // first button\n            if (this.options.firstLast) {\n                frag.appendChild(button(c, this.totalPages, this.options.lastText))\n            }\n\n            // We may have more than one pager\n            this.pagers.forEach(pager => {\n                pager.appendChild(frag.cloneNode(true))\n            })\n        }\n    }\n\n    /**\n     * Render the header\n     * @return {Void}\n     */\n    renderHeader() {\n        this.labels = []\n\n        if (this.headings && this.headings.length) {\n            this.headings.forEach((th, i) => {\n\n                this.labels[i] = th.textContent\n\n                if (th.firstElementChild && th.firstElementChild.classList.contains(\"dataTable-sorter\")) {\n                    th.innerHTML = th.firstElementChild.innerHTML\n                }\n\n                th.sortable = th.getAttribute(\"data-sortable\") !== \"false\"\n\n                th.originalCellIndex = i\n                if (this.options.sortable && th.sortable) {\n                    const link = createElement(\"a\", {\n                        href: \"#\",\n                        class: \"dataTable-sorter\",\n                        html: th.innerHTML\n                    })\n\n                    th.innerHTML = \"\"\n                    th.setAttribute(\"data-sortable\", \"\")\n                    th.appendChild(link)\n                }\n            })\n        }\n\n        this.fixColumns()\n    }\n\n    /**\n     * Bind event listeners\n     * @return {[type]} [description]\n     */\n    bindEvents() {\n        const options = this.options\n        // Per page selector\n        if (options.perPageSelect) {\n            const selector = this.wrapper.querySelector(\".dataTable-selector\")\n            if (selector) {\n                // Change per page\n                selector.addEventListener(\"change\", () => {\n                    options.perPage = parseInt(selector.value, 10)\n                    this.update()\n\n                    this.fixHeight()\n\n                    this.emit(\"datatable.perpage\", options.perPage)\n                }, false)\n            }\n        }\n\n        // Search input\n        if (options.searchable) {\n            this.input = this.wrapper.querySelector(\".dataTable-input\")\n            if (this.input) {\n                this.input.addEventListener(\"keyup\", () => this.search(this.input.value), false)\n            }\n        }\n\n        // Pager(s) / sorting\n        this.wrapper.addEventListener(\"click\", e => {\n            const t = e.target.closest(\"a\")\n            if (t && (t.nodeName.toLowerCase() === \"a\")) {\n                if (t.hasAttribute(\"data-page\")) {\n                    this.page(t.getAttribute(\"data-page\"))\n                    e.preventDefault()\n                } else if (\n                    options.sortable &&\n                    t.classList.contains(\"dataTable-sorter\") &&\n                    t.parentNode.getAttribute(\"data-sortable\") != \"false\"\n                ) {\n                    this.columns().sort(this.headings.indexOf(t.parentNode))\n                    e.preventDefault()\n                }\n            }\n        }, false)\n\n        window.addEventListener(\"resize\", this.listeners.onResize)\n    }\n\n    /**\n     * execute on resize\n     */\n    onResize() {\n        this.rect = this.container.getBoundingClientRect()\n        if (!this.rect.width) {\n            // No longer shown, likely no longer part of DOM. Give up.\n            return\n        }\n        this.fixColumns()\n    }\n\n    /**\n     * Set up columns\n     * @return {[type]} [description]\n     */\n    setColumns(ajax) {\n\n        if (!ajax) {\n            this.data.forEach(row => {\n                Array.from(row.cells).forEach(cell => {\n                    cell.data = cell.innerHTML\n                })\n            })\n        }\n\n        // Check for the columns option\n        if (this.options.columns && this.headings.length) {\n\n            this.options.columns.forEach(data => {\n\n                // convert single column selection to array\n                if (!Array.isArray(data.select)) {\n                    data.select = [data.select]\n                }\n\n                if (data.hasOwnProperty(\"render\") && typeof data.render === \"function\") {\n                    this.selectedColumns = this.selectedColumns.concat(data.select)\n\n                    this.columnRenderers.push({\n                        columns: data.select,\n                        renderer: data.render\n                    })\n                }\n\n                // Add the data attributes to the th elements\n                data.select.forEach(column => {\n                    const th = this.headings[column]\n                    if (!th) {\n                        return\n                    }\n                    if (data.type) {\n                        th.setAttribute(\"data-type\", data.type)\n                    }\n                    if (data.format) {\n                        th.setAttribute(\"data-format\", data.format)\n                    }\n                    if (data.hasOwnProperty(\"sortable\")) {\n                        th.setAttribute(\"data-sortable\", data.sortable)\n                    }\n\n                    if (data.hasOwnProperty(\"hidden\")) {\n                        if (data.hidden !== false) {\n                            this.columns().hide([column])\n                        }\n                    }\n\n                    if (data.hasOwnProperty(\"sort\") && data.select.length === 1) {\n                        this.columns().sort(data.select[0], data.sort, true)\n                    }\n                })\n            })\n        }\n\n        if (this.hasRows) {\n            this.data.forEach((row, i) => {\n                row.dataIndex = i\n                Array.from(row.cells).forEach(cell => {\n                    cell.data = cell.innerHTML\n                })\n            })\n\n            if (this.selectedColumns.length) {\n                this.data.forEach(row => {\n                    Array.from(row.cells).forEach((cell, i) => {\n                        if (this.selectedColumns.includes(i)) {\n                            this.columnRenderers.forEach(options => {\n                                if (options.columns.includes(i)) {\n                                    cell.innerHTML = options.renderer.call(this, cell.data, cell, row)\n                                }\n                            })\n                        }\n                    })\n                })\n            }\n\n            this.columns().rebuild()\n        }\n\n        this.render(\"header\")\n    }\n\n    /**\n     * Destroy the instance\n     * @return {void}\n     */\n    destroy() {\n        this.dom.innerHTML = this.initialLayout\n\n        // Remove the className\n        this.dom.classList.remove(\"dataTable-table\")\n\n        // Remove the containers\n        this.wrapper.parentNode.replaceChild(this.dom, this.wrapper)\n\n        this.initialized = false\n\n        window.removeEventListener(\"resize\", this.listeners.onResize)\n    }\n\n    /**\n     * Update the instance\n     * @return {Void}\n     */\n    update() {\n        this.wrapper.classList.remove(\"dataTable-empty\")\n\n        this.paginate(this)\n        this.render(\"page\")\n\n        this.links = []\n\n        let i = this.pages.length\n        while (i--) {\n            const num = i + 1\n            this.links[i] = button(i === 0 ? \"active\" : \"\", num, num)\n        }\n\n        this.sorting = false\n\n        this.render(\"pager\")\n\n        this.rows().update()\n\n        this.emit(\"datatable.update\")\n    }\n\n    /**\n     * Sort rows into pages\n     * @return {Number}\n     */\n    paginate() {\n        const perPage = this.options.perPage\n        let rows = this.activeRows\n\n        if (this.searching) {\n            rows = []\n\n            this.searchData.forEach(index => rows.push(this.activeRows[index]))\n        }\n\n        if (this.options.paging) {\n            // Check for hidden columns\n            this.pages = rows\n                .map((tr, i) => i % perPage === 0 ? rows.slice(i, i + perPage) : null)\n                .filter(page => page)\n        } else {\n            this.pages = [rows]\n        }\n\n        this.totalPages = this.lastPage = this.pages.length\n\n        return this.totalPages\n    }\n\n    /**\n     * Fix column widths\n     * @return {Void}\n     */\n    fixColumns() {\n\n        if ((this.options.scrollY.length || this.options.fixedColumns) && this.activeHeadings && this.activeHeadings.length) {\n            let cells\n            let hd = false\n            this.columnWidths = []\n\n            // If we have headings we need only set the widths on them\n            // otherwise we need a temp header and the widths need applying to all cells\n            if (this.dom.tHead) {\n\n                if (this.options.scrollY.length) {\n                    hd = createElement(\"thead\")\n                    hd.appendChild(createElement(\"tr\"))\n                    hd.style.height = \"0px\"\n                    if (this.headerTable) {\n                        // move real header back into place\n                        this.dom.tHead = this.headerTable.tHead\n                    }\n                }\n\n                // Reset widths\n                this.activeHeadings.forEach(cell => {\n                    cell.style.width = \"\"\n                })\n\n                const totalOffsetWidth = this.activeHeadings.reduce(\n                    (total, cell) => total + cell.offsetWidth,\n                    0\n                )\n\n                this.activeHeadings.forEach((cell, i) => {\n                    const ow = cell.offsetWidth\n                    const w = ow / totalOffsetWidth * 100\n                    cell.style.width = `${w}%`\n                    this.columnWidths[i] = ow\n                    if (this.options.scrollY.length) {\n                        const th = createElement(\"th\")\n                        hd.firstElementChild.appendChild(th)\n                        th.style.width = `${w}%`\n                        th.style.paddingTop = \"0\"\n                        th.style.paddingBottom = \"0\"\n                        th.style.border = \"0\"\n                    }\n                })\n\n                if (this.options.scrollY.length) {\n                    const container = this.dom.parentElement\n                    if (!this.headerTable) {\n                        this.headerTable = createElement(\"table\", {\n                            class: \"dataTable-table\"\n                        })\n                        const headercontainer = createElement(\"div\", {\n                            class: \"dataTable-headercontainer\"\n                        })\n                        headercontainer.appendChild(this.headerTable)\n                        container.parentElement.insertBefore(headercontainer, container)\n                    }\n                    const thd = this.dom.tHead\n                    this.dom.replaceChild(hd, thd)\n                    this.headerTable.tHead = thd\n\n                    // Compensate for scrollbars.\n                    this.headerTable.parentElement.style.paddingRight = `${\n                        this.headerTable.clientWidth -\n                        this.dom.clientWidth +\n                        parseInt(\n                            this.headerTable.parentElement.style.paddingRight ||\n                            \"0\",\n                            10\n                        )\n                    }px`\n\n                    if (container.scrollHeight > container.clientHeight) {\n                        // scrollbars on one page means scrollbars on all pages.\n                        container.style.overflowY = \"scroll\"\n                    }\n                }\n\n            } else {\n                cells = []\n\n                // Make temperary headings\n                hd = createElement(\"thead\")\n                const r = createElement(\"tr\")\n                Array.from(this.dom.tBodies[0].rows[0].cells).forEach(() => {\n                    const th = createElement(\"th\")\n                    r.appendChild(th)\n                    cells.push(th)\n                })\n\n                hd.appendChild(r)\n                this.dom.insertBefore(hd, this.body)\n\n                const widths = []\n                cells.forEach((cell, i) => {\n                    const ow = cell.offsetWidth\n                    const w = ow / this.rect.width * 100\n                    widths.push(w)\n                    this.columnWidths[i] = ow\n                })\n\n                this.data.forEach(row => {\n                    Array.from(row.cells).forEach((cell, i) => {\n                        if (this.columns(cell.cellIndex).visible())\n                            cell.style.width = `${widths[i]}%`\n                    })\n                })\n\n                // Discard the temp header\n                this.dom.removeChild(hd)\n            }\n        }\n    }\n\n    /**\n     * Fix the container height\n     * @return {Void}\n     */\n    fixHeight() {\n        if (this.options.fixedHeight) {\n            this.container.style.height = null\n            this.rect = this.container.getBoundingClientRect()\n            this.container.style.height = `${this.rect.height}px`\n        }\n    }\n\n    /**\n     * Perform a search of the data set\n     * @param  {string} query\n     * @return {void}\n     */\n    search(query) {\n        if (!this.hasRows) return false\n\n        query = query.toLowerCase()\n\n        this.currentPage = 1\n        this.searching = true\n        this.searchData = []\n\n        if (!query.length) {\n            this.searching = false\n            this.update()\n            this.emit(\"datatable.search\", query, this.searchData)\n            this.wrapper.classList.remove(\"search-results\")\n            return false\n        }\n\n        this.clear()\n\n        this.data.forEach((row, idx) => {\n            const inArray = this.searchData.includes(row)\n\n            // https://github.com/Mobius1/Vanilla-DataTables/issues/12\n            const doesQueryMatch = query.split(\" \").reduce((bool, word) => {\n                let includes = false\n                let cell = null\n                let content = null\n\n                for (let x = 0; x < row.cells.length; x++) {\n                    cell = row.cells[x]\n                    content = cell.hasAttribute(\"data-content\") ? cell.getAttribute(\"data-content\") : cell.textContent\n\n                    if (\n                        content.toLowerCase().includes(word) &&\n                        this.columns(cell.cellIndex).visible()\n                    ) {\n                        includes = true\n                        break\n                    }\n                }\n\n                return bool && includes\n            }, true)\n\n            if (doesQueryMatch && !inArray) {\n                row.searchIndex = idx\n                this.searchData.push(idx)\n            } else {\n                row.searchIndex = null\n            }\n        })\n\n        this.wrapper.classList.add(\"search-results\")\n\n        if (!this.searchData.length) {\n            this.wrapper.classList.remove(\"search-results\")\n\n            this.setMessage(this.options.labels.noResults)\n        } else {\n            this.update()\n        }\n\n        this.emit(\"datatable.search\", query, this.searchData)\n    }\n\n    /**\n     * Change page\n     * @param  {int} page\n     * @return {void}\n     */\n    page(page) {\n        // We don't want to load the current page again.\n        if (page == this.currentPage) {\n            return false\n        }\n\n        if (!isNaN(page)) {\n            this.currentPage = parseInt(page, 10)\n        }\n\n        if (page > this.pages.length || page < 0) {\n            return false\n        }\n\n        this.render(\"page\")\n        this.render(\"pager\")\n\n        this.emit(\"datatable.page\", page)\n    }\n\n    /**\n     * Sort by column\n     * @param  {int} column - The column no.\n     * @param  {string} direction - asc or desc\n     * @return {void}\n     */\n    sortColumn(column, direction) {\n        // Use columns API until sortColumn method is removed\n        this.columns().sort(column, direction)\n    }\n\n    /**\n     * Add new row data\n     * @param {object} data\n     */\n    insert(data) {\n        let rows = []\n        if (isObject(data)) {\n            if (data.headings) {\n                if (!this.hasHeadings && !this.hasRows) {\n                    const tr = createElement(\"tr\")\n                    data.headings.forEach(heading => {\n                        const th = createElement(\"th\", {\n                            html: heading\n                        })\n\n                        tr.appendChild(th)\n                    })\n                    this.head.appendChild(tr)\n\n                    this.header = tr\n                    this.headings = [].slice.call(tr.cells)\n                    this.hasHeadings = true\n\n                    // Re-enable sorting if it was disabled due\n                    // to missing header\n                    this.options.sortable = this.initialSortable\n\n                    // Allow sorting on new header\n                    this.render(\"header\")\n\n                    // Activate newly added headings\n                    this.activeHeadings = this.headings.slice()\n                }\n            }\n\n            if (data.data && Array.isArray(data.data)) {\n                rows = data.data\n            }\n        } else if (Array.isArray(data)) {\n            data.forEach(row => {\n                const r = []\n                Object.entries(row).forEach(([heading, cell]) => {\n\n                    const index = this.labels.indexOf(heading)\n\n                    if (index > -1) {\n                        r[index] = cell\n                    }\n                })\n                rows.push(r)\n            })\n        }\n\n        if (rows.length) {\n            this.rows().add(rows)\n\n            this.hasRows = true\n        }\n\n        this.update()\n        this.setColumns()\n        this.fixColumns()\n    }\n\n    /**\n     * Refresh the instance\n     * @return {void}\n     */\n    refresh() {\n        if (this.options.searchable) {\n            this.input.value = \"\"\n            this.searching = false\n        }\n        this.currentPage = 1\n        this.onFirstPage = true\n        this.update()\n\n        this.emit(\"datatable.refresh\")\n    }\n\n    /**\n     * Truncate the table\n     * @param  {mixes} html - HTML string or HTMLElement\n     * @return {void}\n     */\n    clear(html) {\n        if (this.body) {\n            flush(this.body)\n        }\n\n        let parent = this.body\n        if (!this.body) {\n            parent = this.dom\n        }\n\n        if (html) {\n            if (typeof html === \"string\") {\n                const frag = document.createDocumentFragment()\n                frag.innerHTML = html\n            }\n\n            parent.appendChild(html)\n        }\n    }\n\n    /**\n     * Export table to various formats (csv, txt or sql)\n     * @param  {Object} userOptions User options\n     * @return {Boolean}\n     */\n    export(userOptions) {\n        if (!this.hasHeadings && !this.hasRows) return false\n\n        const headers = this.activeHeadings\n        let rows = []\n        const arr = []\n        let i\n        let x\n        let str\n        let link\n\n        const defaults = {\n            download: true,\n            skipColumn: [],\n\n            // csv\n            lineDelimiter: \"\\n\",\n            columnDelimiter: \",\",\n\n            // sql\n            tableName: \"myTable\",\n\n            // json\n            replacer: null,\n            space: 4\n        }\n\n        // Check for the options object\n        if (!isObject(userOptions)) {\n            return false\n        }\n\n        const options = {\n            ...defaults,\n            ...userOptions\n        }\n\n        if (options.type) {\n            if (options.type === \"txt\" || options.type === \"csv\") {\n                // Include headings\n                rows[0] = this.header\n            }\n\n            // Selection or whole table\n            if (options.selection) {\n                // Page number\n                if (!isNaN(options.selection)) {\n                    rows = rows.concat(this.pages[options.selection - 1])\n                } else if (Array.isArray(options.selection)) {\n                    // Array of page numbers\n                    for (i = 0; i < options.selection.length; i++) {\n                        rows = rows.concat(this.pages[options.selection[i] - 1])\n                    }\n                }\n            } else {\n                rows = rows.concat(this.activeRows)\n            }\n\n            // Only proceed if we have data\n            if (rows.length) {\n                if (options.type === \"txt\" || options.type === \"csv\") {\n                    str = \"\"\n\n                    for (i = 0; i < rows.length; i++) {\n                        for (x = 0; x < rows[i].cells.length; x++) {\n                            // Check for column skip and visibility\n                            if (\n                                !options.skipColumn.includes(headers[x].originalCellIndex) &&\n                                this.columns(headers[x].originalCellIndex).visible()\n                            ) {\n                                let text = rows[i].cells[x].textContent\n                                text = text.trim()\n                                text = text.replace(/\\s{2,}/g, \" \")\n                                text = text.replace(/\\n/g, \"  \")\n                                text = text.replace(/\"/g, \"\\\"\\\"\")\n                                //have to manually encode \"#\" as encodeURI leaves it as is.\n                                text = text.replace(/#/g, \"%23\")\n                                if (text.includes(\",\"))\n                                    text = `\"${text}\"`\n\n\n                                str += text + options.columnDelimiter\n                            }\n                        }\n                        // Remove trailing column delimiter\n                        str = str.trim().substring(0, str.length - 1)\n\n                        // Apply line delimiter\n                        str += options.lineDelimiter\n                    }\n\n                    // Remove trailing line delimiter\n                    str = str.trim().substring(0, str.length - 1)\n\n                    if (options.download) {\n                        str = `data:text/csv;charset=utf-8,${str}`\n                    }\n                } else if (options.type === \"sql\") {\n                    // Begin INSERT statement\n                    str = `INSERT INTO \\`${options.tableName}\\` (`\n\n                    // Convert table headings to column names\n                    for (i = 0; i < headers.length; i++) {\n                        // Check for column skip and column visibility\n                        if (\n                            !options.skipColumn.includes(headers[i].originalCellIndex) &&\n                            this.columns(headers[i].originalCellIndex).visible()\n                        ) {\n                            str += `\\`${headers[i].textContent}\\`,`\n                        }\n                    }\n\n                    // Remove trailing comma\n                    str = str.trim().substring(0, str.length - 1)\n\n                    // Begin VALUES\n                    str += \") VALUES \"\n\n                    // Iterate rows and convert cell data to column values\n                    for (i = 0; i < rows.length; i++) {\n                        str += \"(\"\n\n                        for (x = 0; x < rows[i].cells.length; x++) {\n                            // Check for column skip and column visibility\n                            if (\n                                !options.skipColumn.includes(headers[x].originalCellIndex) &&\n                                this.columns(headers[x].originalCellIndex).visible()\n                            ) {\n                                str += `\"${rows[i].cells[x].textContent}\",`\n                            }\n                        }\n\n                        // Remove trailing comma\n                        str = str.trim().substring(0, str.length - 1)\n\n                        // end VALUES\n                        str += \"),\"\n                    }\n\n                    // Remove trailing comma\n                    str = str.trim().substring(0, str.length - 1)\n\n                    // Add trailing colon\n                    str += \";\"\n\n                    if (options.download) {\n                        str = `data:application/sql;charset=utf-8,${str}`\n                    }\n                } else if (options.type === \"json\") {\n                    // Iterate rows\n                    for (x = 0; x < rows.length; x++) {\n                        arr[x] = arr[x] || {}\n                        // Iterate columns\n                        for (i = 0; i < headers.length; i++) {\n                            // Check for column skip and column visibility\n                            if (\n                                !options.skipColumn.includes(headers[i].originalCellIndex) &&\n                                this.columns(headers[i].originalCellIndex).visible()\n                            ) {\n                                arr[x][headers[i].textContent] = rows[x].cells[i].textContent\n                            }\n                        }\n                    }\n\n                    // Convert the array of objects to JSON string\n                    str = JSON.stringify(arr, options.replacer, options.space)\n\n                    if (options.download) {\n                        str = `data:application/json;charset=utf-8,${str}`\n                    }\n                }\n\n                // Download\n                if (options.download) {\n                    // Filename\n                    options.filename = options.filename || \"datatable_export\"\n                    options.filename += `.${options.type}`\n\n                    str = encodeURI(str)\n\n                    // Create a link to trigger the download\n                    link = document.createElement(\"a\")\n                    link.href = str\n                    link.download = options.filename\n\n                    // Append the link\n                    document.body.appendChild(link)\n\n                    // Trigger the download\n                    link.click()\n\n                    // Remove the link\n                    document.body.removeChild(link)\n                }\n\n                return str\n            }\n        }\n\n        return false\n    }\n\n    /**\n     * Import data to the table\n     * @param  {Object} userOptions User options\n     * @return {Boolean}\n     */\n    import(userOptions) {\n        let obj = false\n        const defaults = {\n            // csv\n            lineDelimiter: \"\\n\",\n            columnDelimiter: \",\",\n            removeDoubleQuotes: false\n        }\n\n        // Check for the options object\n        if (!isObject(userOptions)) {\n            return false\n        }\n\n        const options = {\n            ...defaults,\n            ...userOptions\n        }\n\n        if (options.data.length || isObject(options.data)) {\n            // Import CSV\n            if (options.type === \"csv\") {\n                obj = {\n                    data: []\n                }\n\n                // Split the string into rows\n                const rows = options.data.split(options.lineDelimiter)\n\n                if (rows.length) {\n\n                    if (options.headings) {\n                        obj.headings = rows[0].split(options.columnDelimiter)\n                        if (options.removeDoubleQuotes) {\n                            obj.headings = obj.headings.map(e => e.trim().replace(/(^\"|\"$)/g, \"\"))\n                        }\n                        rows.shift()\n                    }\n\n                    rows.forEach((row, i) => {\n                        obj.data[i] = []\n\n                        // Split the rows into values\n                        const values = row.split(options.columnDelimiter)\n\n                        if (values.length) {\n                            values.forEach(value => {\n                                if (options.removeDoubleQuotes) {\n                                    value = value.trim().replace(/(^\"|\"$)/g, \"\")\n                                }\n                                obj.data[i].push(value)\n                            })\n                        }\n                    })\n                }\n            } else if (options.type === \"json\") {\n                const json = isJson(options.data)\n\n                // Valid JSON string\n                if (json) {\n                    obj = {\n                        headings: [],\n                        data: []\n                    }\n\n                    json.forEach((data, i) => {\n                        obj.data[i] = []\n                        Object.entries(data).forEach(([column, value]) => {\n                            if (!obj.headings.includes(column)) {\n                                obj.headings.push(column)\n                            }\n\n                            obj.data[i].push(value)\n                        })\n                    })\n                } else {\n                    // console.warn(\"That's not valid JSON!\")\n                }\n            }\n\n            if (isObject(options.data)) {\n                obj = options.data\n            }\n\n            if (obj) {\n                // Add the rows\n                this.insert(obj)\n            }\n        }\n\n        return false\n    }\n\n    /**\n     * Print the table\n     * @return {void}\n     */\n    print() {\n        const headings = this.activeHeadings\n        const rows = this.activeRows\n        const table = createElement(\"table\")\n        const thead = createElement(\"thead\")\n        const tbody = createElement(\"tbody\")\n\n        const tr = createElement(\"tr\")\n        headings.forEach(th => {\n            tr.appendChild(\n                createElement(\"th\", {\n                    html: th.textContent\n                })\n            )\n        })\n\n        thead.appendChild(tr)\n\n        rows.forEach(row => {\n            const tr = createElement(\"tr\")\n            Array.from(row.cells).forEach(cell => {\n                tr.appendChild(\n                    createElement(\"td\", {\n                        html: cell.textContent\n                    })\n                )\n            })\n            tbody.appendChild(tr)\n        })\n\n        table.appendChild(thead)\n        table.appendChild(tbody)\n\n        // Open new window\n        const w = window.open()\n\n        // Append the table to the body\n        w.document.body.appendChild(table)\n\n        // Print\n        w.print()\n    }\n\n    /**\n     * Show a message in the table\n     * @param {string} message\n     */\n    setMessage(message) {\n        let colspan = 1\n\n        if (this.hasRows) {\n            colspan = this.data[0].cells.length\n        } else if (this.activeHeadings.length) {\n            colspan = this.activeHeadings.length\n        }\n\n        this.wrapper.classList.add(\"dataTable-empty\")\n\n        if (this.label) {\n            this.label.innerHTML = \"\"\n        }\n        this.totalPages = 0\n        this.render(\"pager\")\n\n        this.clear(\n            createElement(\"tr\", {\n                html: `<td class=\"dataTables-empty\" colspan=\"${colspan}\">${message}</td>`\n            })\n        )\n    }\n\n    /**\n     * Columns API access\n     * @return {Object} new Columns instance\n     */\n    columns(columns) {\n        return new Columns(this, columns)\n    }\n\n    /**\n     * Rows API access\n     * @return {Object} new Rows instance\n     */\n    rows(rows) {\n        return new Rows(this, rows)\n    }\n\n    /**\n     * Add custom event listener\n     * @param  {String} event\n     * @param  {Function} callback\n     * @return {Void}\n     */\n    on(event, callback) {\n        this.events = this.events || {}\n        this.events[event] = this.events[event] || []\n        this.events[event].push(callback)\n    }\n\n    /**\n     * Remove custom event listener\n     * @param  {String} event\n     * @param  {Function} callback\n     * @return {Void}\n     */\n    off(event, callback) {\n        this.events = this.events || {}\n        if (event in this.events === false) return\n        this.events[event].splice(this.events[event].indexOf(callback), 1)\n    }\n\n    /**\n     * Fire custom event\n     * @param  {String} event\n     * @return {Void}\n     */\n    emit(event) {\n        this.events = this.events || {}\n        if (event in this.events === false) return\n        for (let i = 0; i < this.events[event].length; i++) {\n            this.events[event][i].apply(this, Array.prototype.slice.call(arguments, 1))\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["c", "d", "e", "f", "options", "pager", "tr"]
}
